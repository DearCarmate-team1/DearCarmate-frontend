// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// Company Model - Multi-Tenant 회사
// ============================================
model Company {
  id          String   @id @default(uuid())
  companyName String   // 회사명
  companyCode String   @unique // 회사 인증코드
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users             User[]
  cars              Car[]
  customers         Customer[]
  contracts         Contract[]
  contractDocuments ContractDocument[]

  @@map("companies")
}

// ============================================
// User Model - 사용자
// ============================================
model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String // bcrypt 해시
  name           String
  employeeNumber String // 사원번호
  phoneNumber    String
  imageUrl       String? // 프로필 이미지 URL
  isAdmin        Boolean  @default(false) // true = 플랫폼 관리자, false = 일반 사용자
  companyId      String? // NULL = 플랫폼 관리자
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts         Contract[] // 담당자로 지정된 계약들
  contractDocuments ContractDocument[] // 작성한 계약서들

  @@unique([companyId, employeeNumber]) // 회사 내 사원번호 중복 방지
  @@map("users")
}

// ============================================
// Car Model - 차량
// ============================================
enum CarStatus {
  possession // 보유 중
  contractProceeding // 계약 진행 중
  contractCompleted // 계약 완료
}

model Car {
  id                 String     @id @default(uuid())
  carNumber          String // 차량번호
  manufacturer       String // 제조사
  model              String // 차종
  manufacturingYear  Int // 제조년도
  mileage            Int // 주행거리
  price              Int // 가격
  accidentCount      Int        @default(0) // 사고횟수
  accidentDetails    String? // 사고 상세 내용
  explanation        String? // 차량 설명
  status             CarStatus  @default(possession)
  type               String? // 차량 타입 (경차, 소형, 중형, 대형, SUV 등)
  companyId          String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@unique([companyId, carNumber]) // 회사 내 차량번호 중복 방지
  @@index([companyId, status])
  @@map("cars")
}

// ============================================
// CarModel Master - 차량 모델 마스터 데이터
// ============================================
model CarModel {
  id           String   @id @default(uuid())
  manufacturer String // 제조사 (현대, 기아, 쌍용, 르노, 벤츠 등)
  modelName    String // 모델명 (아반떼, 소나타, K3, K5 등)
  category     String? // 차량 분류 (경차, 소형, 중형, 대형, SUV 등)
  createdAt    DateTime @default(now())

  @@unique([manufacturer, modelName])
  @@map("car_models")
}

// ============================================
// Customer Model - 고객
// ============================================
enum Gender {
  male
  female
}

enum AgeGroup {
  TENS // 10대
  TWENTIES // 20대
  THIRTIES // 30대
  FORTIES // 40대
  FIFTIES // 50대
  SIXTIES // 60대
  SEVENTIES // 70대
  EIGHTIES // 80대
}

enum Region {
  SEOUL // 서울
  GYEONGGI // 경기
  INCHEON // 인천
  GANGWON // 강원
  CHUNGBUK // 충북
  CHUNGNAM // 충남
  SEJONG // 세종
  DAEJEON // 대전
  JEONBUK // 전북
  JEONNAM // 전남
  GWANGJU // 광주
  GYEONGBUK // 경북
  GYEONGNAM // 경남
  DAEGU // 대구
  ULSAN // 울산
  BUSAN // 부산
  JEJU // 제주
}

model Customer {
  id          String     @id @default(uuid())
  name        String // 고객명
  gender      Gender // 성별
  phoneNumber String // 연락처
  ageGroup    AgeGroup? // 연령대
  region      Region? // 지역
  email       String? // 이메일
  memo        String? // 메모
  companyId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@index([companyId])
  @@map("customers")
}

// ============================================
// Contract Model - 계약
// ============================================
enum ContractStatus {
  carInspection // 차량 확인
  priceNegotiation // 가격 협의
  contractDraft // 계약 초안
  contractSuccessful // 계약 성공
  contractFailed // 계약 실패
}

model Contract {
  id               String         @id @default(uuid())
  carId            String
  customerId       String
  userId           String // 담당자 (User) - 프론트에서는 userId로 사용
  status           ContractStatus @default(carInspection)
  contractPrice    Int? // 최종 계약 금액 (계약 완료 시)
  resolutionDate   DateTime? // 완료 일자 (성공/실패)
  meetings         Json? // 미팅 스케줄 배열 [{date, alarms}]
  companyId        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  car               Car                @relation(fields: [carId], references: [id], onDelete: Restrict)
  customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Restrict)
  user              User               @relation(fields: [userId], references: [id], onDelete: Restrict)
  contractDocuments ContractDocument[]

  @@index([companyId, status])
  @@map("contracts")
}

// ============================================
// ContractDocument Model - 계약서 문서
// ============================================
model ContractDocument {
  id             String    @id @default(uuid())
  fileName       String // 파일명
  contractName   String? // 계약서명
  filePath       String // 파일 저장 경로
  fileSize       Int // 파일 크기 (bytes)
  mimeType       String // MIME 타입
  contractId     String? // NULL = 초안
  userId         String // 업로더 (User) - 프론트에서는 userId로 사용
  resolutionDate DateTime? // 계약 체결일
  companyId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contract Contract? @relation(fields: [contractId], references: [id], onDelete: SetNull)
  user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([companyId])
  @@index([contractId])
  @@map("contract_documents")
}

// ============================================
// Notification Model - 알림
// ============================================
enum NotificationType {
  MEETING_REMINDER // 미팅 리마인더
  CONTRACT_DOCUMENT // 계약서 업로드
}

enum NotificationStatus {
  PENDING // 대기
  SENT // 발송 완료
  FAILED // 발송 실패
}

model Notification {
  id         String             @id @default(uuid())
  type       NotificationType
  status     NotificationStatus @default(PENDING)
  recipient  String // 수신자 이메일
  subject    String // 제목
  content    String // 내용
  metadata   Json? // 추가 메타데이터
  scheduledAt DateTime? // 예약 발송 시간
  sentAt     DateTime? // 실제 발송 시간
  errorMessage String? // 에러 메시지
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([status, scheduledAt])
  @@map("notifications")
}
